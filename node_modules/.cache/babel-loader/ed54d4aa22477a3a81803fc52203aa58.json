{"ast":null,"code":"import Firebase from '../config/Firebase';\nexport const UPDATE_BLOGS = \"UPDATE_BLOGS\";\nexport const TOGGLE_BLOG_LOADING = \"TOGGLE_BLOG_LOADING\";\nexport const loadBlogs = () => {\n  return dispatch => {\n    Firebase.firestore().collection('blogPosts').limit(20).get().then(snap => {\n      var arr = [];\n      snap.docs.map(doc => {\n        const obj = Object.assign({\n          _id: doc.id\n        }, doc.data());\n        console.log(obj);\n        arr.push(obj);\n      });\n      dispatch(updateBlogs(arr));\n    }).catch(err => {\n      console.log(err);\n    });\n  };\n};\nexport const toggleBlog = () => {\n  return dispatch => {\n    dispatch(toggleBlogLoading());\n  };\n};\nexport const addBlogPost = blogPost => {\n  return (dispatch, getState) => {\n    Firebase.firestore().collection('blogPosts').add({\n      text: blogPost,\n      date: new Date()\n    }).then(() => {\n      console.log('documnet successfully written');\n    }).catch(err => {\n      console.log(\"There was an error: \", err);\n    });\n  };\n};\nexport const deleteBlogPost = blogId => {\n  return (dispatch, getState) => {\n    Firebase.firestore().collection('testimonies').doc(blogId).delete().then(() => {\n      console.log('Documnet Sucessfully Deleted');\n      const blogPosts = getState().blogs.blogPosts;\n      var newBlogs = [];\n      blogPosts.map(b => {\n        if (b._id != blogId) {\n          newBlogs.push(b);\n        }\n      });\n      dispatch(updateBlogs(newBlogs));\n    }).catch(err => {\n      console.log(\"There was an error\", err);\n    });\n  };\n};\n\nconst updateBlogs = blogPosts => ({\n  type: UPDATE_BLOGS,\n  blogPosts\n});\n\nconst toggleBlogLoading = () => ({\n  type: TOGGLE_BLOG_LOADING\n});","map":{"version":3,"sources":["/Users/philippmourasrivastava/Dev/Foxdale/src/app/actions/blogs.js"],"names":["Firebase","UPDATE_BLOGS","TOGGLE_BLOG_LOADING","loadBlogs","dispatch","firestore","collection","limit","get","then","snap","arr","docs","map","doc","obj","Object","assign","_id","id","data","console","log","push","updateBlogs","catch","err","toggleBlog","toggleBlogLoading","addBlogPost","blogPost","getState","add","text","date","Date","deleteBlogPost","blogId","delete","blogPosts","blogs","newBlogs","b","type"],"mappings":"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","sourcesContent":["import Firebase from '../config/Firebase';\n\nexport const UPDATE_BLOGS = \"UPDATE_BLOGS\";\nexport const TOGGLE_BLOG_LOADING = \"TOGGLE_BLOG_LOADING\";\n\nexport const loadBlogs = () => {\n\n  return (dispatch) => {\n\n    Firebase.firestore().collection('blogPosts').limit(20).get().then((snap) => {\n\n      var arr = []\n\n      snap.docs.map((doc) => {\n        const obj = Object.assign({_id: doc.id}, doc.data())\n        console.log(obj)\n        arr.push(obj)\n      })\n\n      dispatch(updateBlogs(arr))\n    }).catch((err) => {\n      console.log(err)\n    })\n\n\n  }\n}\n\nexport const toggleBlog = () => {\n\n  return (dispatch) => {\n    dispatch(toggleBlogLoading())\n  }\n}\n\nexport const addBlogPost = blogPost => {\n\n  return (dispatch, getState) => {\n\n    Firebase.firestore().collection('blogPosts').add({\n      text: blogPost,\n      date: new Date()\n    }).then(() => {\n      console.log('documnet successfully written');\n    }).catch((err) => {\n      console.log(\"There was an error: \", err);\n    })\n\n  }\n}\n\nexport const deleteBlogPost = blogId => {\n\n  return (dispatch, getState) => {\n\n    Firebase.firestore().collection('testimonies').doc(blogId).delete().then(() => {\n      console.log('Documnet Sucessfully Deleted');\n      const blogPosts = getState().blogs.blogPosts;\n\n      var newBlogs = []\n\n      blogPosts.map((b) => {\n        if(b._id != blogId) {\n          newBlogs.push(b)\n        }\n      })\n\n      dispatch(updateBlogs(newBlogs))\n    }).catch((err) => {\n      console.log(\"There was an error\", err)\n    })\n\n  }\n}\n\nconst updateBlogs = blogPosts => ({\n  type: UPDATE_BLOGS,\n  blogPosts\n})\n\nconst toggleBlogLoading = () => ({\n  type: TOGGLE_BLOG_LOADING\n})\n"]},"metadata":{},"sourceType":"module"}