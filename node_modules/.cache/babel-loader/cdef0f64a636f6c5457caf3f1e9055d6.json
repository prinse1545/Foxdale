{"ast":null,"code":"import Firebase from '../config/Firebase';\nexport const LOG_IN = \"LOG_IN\";\nexport const LOG_OUT = \"LOG_OUT\";\nexport const IS_LOGGED_IN = \"IS_LOGGED_IN\";\nexport const CREATE_ACCOUNT = \"CREATE_ACCOUNT\";\nexport const loginWithFirebase = loginInfo => dispatch => {\n  return new Promise((resolve, reject) => {\n    const data = {\n      loggedIn: true,\n      lastVerification: new Date()\n    };\n    console.log(data);\n    Firebase.auth().signInWithEmailAndPassword(loginInfo.username, loginInfo.password).then(user => {\n      resolve(user);\n      dispatch(login(data));\n    }).catch(err => {\n      reject(err);\n      dispatch(login({\n        loggedIn: false,\n        lastVerification: null\n      }));\n    });\n  });\n};\nexport const isUserLoggedIn = () => {\n  return dispatch => {\n    const user = Firebase.auth();\n    console.log(user);\n  };\n};\nexport const createAccountWithFirebase = accountInfo => {\n  Firebase.auth().createUserWithEmailAndPassword(accountInfo.email, accountInfo.password).then(user => {\n    console.log(err);\n  }).catch(err => {\n    console.log(err);\n  });\n};\nexport const logoutWithFirebase = () => {\n  return dispatch => {\n    Firebase.auth().signOut().then(error => {\n      if (error) {\n        console.log(error);\n      } else {\n        console.log(\"Logged Out Succesfully\");\n      }\n    });\n  };\n};\n\nconst login = data => ({\n  type: LOG_IN,\n  data\n});\n\nconst logout = () => ({\n  type: LOG_OUT\n});\n\nconst isLoggedIn = bool => ({\n  type: IS_LOGGED_IN,\n  bool\n});","map":{"version":3,"sources":["/Users/philippmourasrivastava/Dev/Foxdale/src/app/actions/auth.js"],"names":["Firebase","LOG_IN","LOG_OUT","IS_LOGGED_IN","CREATE_ACCOUNT","loginWithFirebase","loginInfo","dispatch","Promise","resolve","reject","data","loggedIn","lastVerification","Date","console","log","auth","signInWithEmailAndPassword","username","password","then","user","login","catch","err","isUserLoggedIn","createAccountWithFirebase","accountInfo","createUserWithEmailAndPassword","email","logoutWithFirebase","signOut","error","type","logout","isLoggedIn","bool"],"mappings":"AACA,OAAOA,QAAP,MAAqB,oBAArB;AAEA,OAAO,MAAMC,MAAM,GAAG,QAAf;AACP,OAAO,MAAMC,OAAO,GAAG,SAAhB;AACP,OAAO,MAAMC,YAAY,GAAG,cAArB;AACP,OAAO,MAAMC,cAAc,GAAG,gBAAvB;AAEP,OAAO,MAAMC,iBAAiB,GAAGC,SAAS,IAAKC,QAAD,IAAc;AAE1D,SAAO,IAAIC,OAAJ,CAAY,CAACC,OAAD,EAAUC,MAAV,KAAqB;AACtC,UAAMC,IAAI,GAAG;AACXC,MAAAA,QAAQ,EAAE,IADC;AAEXC,MAAAA,gBAAgB,EAAE,IAAIC,IAAJ;AAFP,KAAb;AAIAC,IAAAA,OAAO,CAACC,GAAR,CAAYL,IAAZ;AACAX,IAAAA,QAAQ,CAACiB,IAAT,GAAgBC,0BAAhB,CAA2CZ,SAAS,CAACa,QAArD,EAA+Db,SAAS,CAACc,QAAzE,EAAmFC,IAAnF,CAAyFC,IAAD,IAAU;AAChGb,MAAAA,OAAO,CAACa,IAAD,CAAP;AACAf,MAAAA,QAAQ,CAACgB,KAAK,CAACZ,IAAD,CAAN,CAAR;AACD,KAHD,EAGGa,KAHH,CAGUC,GAAD,IAAS;AAChBf,MAAAA,MAAM,CAACe,GAAD,CAAN;AACAlB,MAAAA,QAAQ,CAACgB,KAAK,CAAC;AAACX,QAAAA,QAAQ,EAAE,KAAX;AAAkBC,QAAAA,gBAAgB,EAAE;AAApC,OAAD,CAAN,CAAR;AACD,KAND;AAOD,GAbM,CAAP;AAeD,CAjBM;AAmBP,OAAO,MAAMa,cAAc,GAAG,MAAM;AAElC,SAAQnB,QAAD,IAAc;AACnB,UAAMe,IAAI,GAAGtB,QAAQ,CAACiB,IAAT,EAAb;AAEAF,IAAAA,OAAO,CAACC,GAAR,CAAYM,IAAZ;AACD,GAJD;AAKD,CAPM;AASP,OAAO,MAAMK,yBAAyB,GAAGC,WAAW,IAAI;AAGtD5B,EAAAA,QAAQ,CAACiB,IAAT,GAAgBY,8BAAhB,CAA+CD,WAAW,CAACE,KAA3D,EAAkEF,WAAW,CAACR,QAA9E,EAAwFC,IAAxF,CAA8FC,IAAD,IAAU;AACrGP,IAAAA,OAAO,CAACC,GAAR,CAAYS,GAAZ;AACD,GAFD,EAEGD,KAFH,CAEUC,GAAD,IAAS;AAChBV,IAAAA,OAAO,CAACC,GAAR,CAAYS,GAAZ;AACD,GAJD;AAMD,CATM;AAWP,OAAO,MAAMM,kBAAkB,GAAG,MAAM;AACtC,SAAQxB,QAAD,IAAc;AAEnBP,IAAAA,QAAQ,CAACiB,IAAT,GAAgBe,OAAhB,GAA0BX,IAA1B,CAAgCY,KAAD,IAAW;AACxC,UAAGA,KAAH,EAAU;AACRlB,QAAAA,OAAO,CAACC,GAAR,CAAYiB,KAAZ;AACD,OAFD,MAGK;AACHlB,QAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;AACD;AACF,KAPD;AASD,GAXD;AAYD,CAbM;;AAgBP,MAAMO,KAAK,GAAGZ,IAAI,KAAK;AACrBuB,EAAAA,IAAI,EAAEjC,MADe;AAErBU,EAAAA;AAFqB,CAAL,CAAlB;;AAKA,MAAMwB,MAAM,GAAG,OAAO;AACpBD,EAAAA,IAAI,EAAEhC;AADc,CAAP,CAAf;;AAIA,MAAMkC,UAAU,GAAGC,IAAI,KAAK;AAC1BH,EAAAA,IAAI,EAAE/B,YADoB;AAE1BkC,EAAAA;AAF0B,CAAL,CAAvB","sourcesContent":["\nimport Firebase from '../config/Firebase'\n\nexport const LOG_IN = \"LOG_IN\"\nexport const LOG_OUT = \"LOG_OUT\"\nexport const IS_LOGGED_IN = \"IS_LOGGED_IN\"\nexport const CREATE_ACCOUNT = \"CREATE_ACCOUNT\"\n\nexport const loginWithFirebase = loginInfo => (dispatch) => {\n\n  return new Promise((resolve, reject) => {\n    const data = {\n      loggedIn: true,\n      lastVerification: new Date()\n    }\n    console.log(data)\n    Firebase.auth().signInWithEmailAndPassword(loginInfo.username, loginInfo.password).then((user) => {\n      resolve(user)\n      dispatch(login(data))\n    }).catch((err) => {\n      reject(err)\n      dispatch(login({loggedIn: false, lastVerification: null}))\n    })\n  })\n\n}\n\nexport const isUserLoggedIn = () => {\n\n  return (dispatch) => {\n    const user = Firebase.auth();\n\n    console.log(user)\n  }\n}\n\nexport const createAccountWithFirebase = accountInfo => {\n\n\n  Firebase.auth().createUserWithEmailAndPassword(accountInfo.email, accountInfo.password).then((user) => {\n    console.log(err)\n  }).catch((err) => {\n    console.log(err)\n  })\n\n}\n\nexport const logoutWithFirebase = () => {\n  return (dispatch) => {\n\n    Firebase.auth().signOut().then((error) => {\n      if(error) {\n        console.log(error)\n      }\n      else {\n        console.log(\"Logged Out Succesfully\")\n      }\n    })\n\n  }\n}\n\n\nconst login = data => ({\n  type: LOG_IN,\n  data\n})\n\nconst logout = () => ({\n  type: LOG_OUT\n})\n\nconst isLoggedIn = bool => ({\n  type: IS_LOGGED_IN,\n  bool\n})\n"]},"metadata":{},"sourceType":"module"}