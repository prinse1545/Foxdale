{"ast":null,"code":"var _jsxFileName = \"/Users/philippmourasrivastava/Dev/Foxdale/src/app/components/signUpForm/index.js\";\nimport React, { Component } from 'react';\nimport { Input, Form, Icon, message, Button } from 'antd';\nimport { accountCreationKey } from '../../../../package.json';\nconst styles = {\n  modalInput: {\n    width: '60%'\n  }\n};\n\nconst SignUpForm = props => {\n  const onSubmit = props.onSubmit,\n        form = props.form;\n  const getFieldDecorator = form.getFieldDecorator;\n\n  const createAccount = e => {\n    e.preventDefault();\n    props.form.validateFields((err, values) => {\n      if (!err) {\n        const info = {\n          email: values.email,\n          password: values.password\n        };\n        onSubmit(info);\n        props.form.resetFields();\n      }\n    });\n  };\n\n  const test = () => console.log('hi');\n\n  const validateKey = (rule, value, callback) => {\n    const form = props.form;\n\n    if (accountCreationKey !== form.getFieldValue('creationKey')) {\n      callback('The key is not correct');\n    } else {\n      callback();\n    }\n  };\n\n  return React.createElement(Form, {\n    onSubmit: createAccount,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 52\n    },\n    __self: this\n  }, React.createElement(Form.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 53\n    },\n    __self: this\n  }, getFieldDecorator('email', {\n    rules: [{\n      type: 'email',\n      message: 'The input is not valid E-mail!'\n    }, {\n      required: true,\n      message: \"Please provide an email for the new account\"\n    }]\n  })(React.createElement(Input, {\n    prefix: React.createElement(Icon, {\n      type: \"mail\",\n      style: {\n        color: 'rgba(0,0,0,.25)'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69\n      },\n      __self: this\n    }),\n    placeholder: \"Email\",\n    style: styles.modalInput,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 67\n    },\n    __self: this\n  }))), React.createElement(Form.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 80\n    },\n    __self: this\n  }, getFieldDecorator('password', {\n    rules: [{\n      required: true,\n      message: 'Please input a password'\n    }]\n  })(React.createElement(Input, {\n    prefix: React.createElement(Icon, {\n      type: \"lock\",\n      style: {\n        color: 'rgba(0,0,0,.25)'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 91\n      },\n      __self: this\n    }),\n    type: \"password\",\n    placeholder: \"Password\",\n    style: styles.modalInput,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89\n    },\n    __self: this\n  }))), React.createElement(Form.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 102\n    },\n    __self: this\n  }, getFieldDecorator('creationKey', {\n    rules: [{\n      required: true,\n      message: \"Please provide a security key\"\n    }, {\n      validator: validateKey\n    }]\n  })(React.createElement(Input, {\n    prefix: React.createElement(Icon, {\n      type: \"key\",\n      style: {\n        color: 'rgba(0,0,0,.25)'\n      },\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }),\n    placeholder: \"Key\",\n    style: styles.modalInput,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 115\n    },\n    __self: this\n  }))), React.createElement(Form.Item, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 128\n    },\n    __self: this\n  }, React.createElement(Button, {\n    type: \"primary\",\n    htmlType: \"submit\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 129\n    },\n    __self: this\n  }, \"Sign Up\")));\n};\n\nexport default Form.create({\n  name: 'SignUpForm'\n})(SignUpForm);","map":{"version":3,"sources":["/Users/philippmourasrivastava/Dev/Foxdale/src/app/components/signUpForm/index.js"],"names":["React","Component","Input","Form","Icon","message","Button","accountCreationKey","styles","modalInput","width","SignUpForm","props","onSubmit","form","getFieldDecorator","createAccount","e","preventDefault","validateFields","err","values","info","email","password","resetFields","test","console","log","validateKey","rule","value","callback","getFieldValue","rules","type","required","color","validator","create","name"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\nimport { Input, Form, Icon, message, Button } from 'antd';\nimport { accountCreationKey } from '../../../../package.json'\n\nconst styles = {\n  modalInput: {\n    width: '60%'\n  }\n}\n\n\nconst SignUpForm = (props) => {\n\n  const { onSubmit, form } = props;\n  const { getFieldDecorator } = form;\n\n  const createAccount = e => {\n\n    e.preventDefault()\n\n    props.form.validateFields((err, values) => {\n      if(!err) {\n        const info = {\n          email: values.email,\n          password: values.password\n        }\n        onSubmit(info)\n\n        props.form.resetFields()\n      }\n    })\n  }\n\n  const test = () => console.log('hi')\n\n  const validateKey = (rule, value, callback) => {\n\n    const { form } = props;\n\n    if(accountCreationKey !== form.getFieldValue('creationKey')) {\n\n      callback('The key is not correct')\n\n    }\n    else {\n      callback()\n    }\n\n  }\n\n  return (\n      <Form onSubmit={createAccount}>\n        <Form.Item>\n          {\n            getFieldDecorator('email', {\n              rules: [\n                {\n                  type: 'email',\n                  message: 'The input is not valid E-mail!',\n                },\n                {\n                  required: true,\n                  message: \"Please provide an email for the new account\"\n                }\n              ]\n            })(\n              <Input\n                  prefix={\n                      <Icon\n                          type=\"mail\"\n                          style={{ color: 'rgba(0,0,0,.25)' }}\n                      />\n                  }\n                  placeholder=\"Email\"\n                  style={styles.modalInput}\n              />\n            )\n          }\n        </Form.Item>\n        <Form.Item>\n            {getFieldDecorator('password', {\n                rules: [\n                    {\n                        required: true,\n                        message: 'Please input a password'\n                    }\n                ]\n            })(\n                <Input\n                    prefix={\n                        <Icon\n                            type=\"lock\"\n                            style={{ color: 'rgba(0,0,0,.25)' }}\n                        />\n                    }\n                    type=\"password\"\n                    placeholder=\"Password\"\n                    style={styles.modalInput}\n                />\n            )}\n        </Form.Item>\n        <Form.Item>\n          {\n            getFieldDecorator('creationKey', {\n              rules: [\n                {\n                  required: true,\n                  message: \"Please provide a security key\"\n                },\n                {\n                  validator: validateKey,\n                }\n              ]\n            })(\n              <Input\n                  prefix={\n                      <Icon\n                          type=\"key\"\n                          style={{ color: 'rgba(0,0,0,.25)' }}\n                      />\n                  }\n                  placeholder=\"Key\"\n                  style={styles.modalInput}\n              />\n            )\n          }\n        </Form.Item>\n        <Form.Item>\n          <Button type=\"primary\" htmlType=\"submit\">\n              Sign Up\n          </Button>\n        </Form.Item>\n      </Form>\n  )\n}\n\nexport default Form.create({ name: 'SignUpForm' })(SignUpForm)\n"]},"metadata":{},"sourceType":"module"}